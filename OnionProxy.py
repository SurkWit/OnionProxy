#!/usr/bin/env python3
import os
import time
import subprocess
import sys
import shutil
import platform
from typing import Dict, Optional

try:
    import requests
except Exception:
    requests = None

TOR_DATA_DIR = os.path.expanduser('~/.tor_proxy')
TORRC_PATH = os.path.join(TOR_DATA_DIR, 'torrc')

SOCKS_IP = "127.0.0.1"
USERNAME = "proxyuser"
PASSWORD = "proxypass"

TOR_CHECK_URL = "https://check.torproject.org/api/ip"

PROTOCOLS = {
    "2": {
        "name": "SOCKS5 + obfs4 –º–æ—Å—Ç—ã",
        "port": 1081,
        "bridges": [
            "obfs4 64.23.136.154:53640 969202413807802849B9CCF6D781B0DAC3C255E8 cert=pACn2AIVKFDJqlMMcv5uPKZ34Y8rnKyDe0cbxHIuUsdLtzY/O3I3JkfbzJ4LpoXdtWv4Mw iat-mode=0",
            "obfs4 91.229.62.14:8042 60FBE30CDAD05EA2E43A84A03303811C74C71E2A cert=viLwWECfGgkNnVUEG1Sr1KD58JXBizufcENJwtaqoI9/cP2xYHY/HBY5HGrHpdI/ZM3/Og iat-mode=0",
            "obfs4 51.38.220.35:42954 B84BDFE3724928B06FC178FF50D5852E5AB7942A cert=6tpTDdnOaRl2elQqdxSmrJ5Gt9JkWcbquznpxx/lqVjRKv/bVecFnXie96KoblCWfvVjYA iat-mode=0",
            "obfs4 51.38.220.224:30996 22494A012CFA8C88B1D907E2CCB8409AC35B537B cert=dOPijSCG6FD89fYv5N2F9QoeK1od3tpG6VBE/kMY0Bt1aW/7aXPIzsENDoLWZe43gI8efw iat-mode=0"
        ],
        "transport": "obfs4",
        "description": "SOCKS5 —Å obfs4 –º–æ—Å—Ç–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"
    }
}

def print_banner():
    banner = r"""
                                                   
‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñë‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñà‚ÄÉ‚ñÄ‚ñÑ‚ñÄ‚ÄÉ‚ñà‚ñÑ‚ñà
‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñÄ‚ñà‚ÄÉ‚ñà‚ñÄ‚ñÄ‚ÄÉ‚ñà‚ñÄ‚ñÑ‚ÄÉ‚ñà‚ñÑ‚ñà‚ÄÉ‚ñà‚ñë‚ñà‚ÄÉ‚ñë‚ñà‚ñë

Author: Mono_Seeker(tg)
    """
    print("\033[1;35m" + banner + "\033[0m")
    print("\033[1;36m" + "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OnionProxy - –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä! üåü" + "\033[0m")
    print("\033[1;36m" + "=" * 70 + "\033[0m")

def show_protocol_menu():
    print("\033[1;33müîß –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–æ–∫—Å–∏ (–∏–ª–∏ 'i' ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏):\033[0m")
    print("\033[1;36m" + "‚îÄ" * 70 + "\033[0m")
    
    print("\033[1;34müì° –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã:\033[0m")
    for key in PROTOCOLS:
        protocol = PROTOCOLS[key]
        icon = "üîí" if "obfs4" in protocol.get('transport', '') else "üåê"
        print(f"  \033[1;32m{key}.\033[0m {icon} \033[1;37m{protocol['name']}\033[0m")
        print(f"     \033[0;33m{protocol['description']}\033[0m")
        print(f"     \033[0;36müìç –ü–æ—Ä—Ç: {protocol['port']}\033[0m")
        if protocol['bridges']:
            print(f"     \033[0;35müåâ –ú–æ—Å—Ç—ã: {len(protocol['bridges'])} —à—Ç.\033[0m")
        print()
    
    print("\033[1;36m" + "‚îÄ" * 70 + "\033[0m")
    
    while True:
        try:
            choice = input("\033[1;33m–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ (2) –∏–ª–∏ 'i' –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: \033[0m").strip()
            if choice.lower() == 'i':
                print_install_instructions()
                print("\033[1;36m" + "-" * 60 + "\033[0m")
                continue
            if choice in PROTOCOLS:
                return choice
            else:
                print("\033[1;31m‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\033[0m")
        except KeyboardInterrupt:
            print("\n\033[1;31m‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\033[0m")
            sys.exit(1)

def create_tor_config(protocol_config):
    os.makedirs(TOR_DATA_DIR, exist_ok=True)

    hashed_pw = subprocess.getoutput(f"tor --hash-password {PASSWORD}")
    
    port = protocol_config['port']
    bridges = protocol_config['bridges']
    
    config_content = f"""
DataDirectory {TOR_DATA_DIR}
ControlPort 9051
HashedControlPassword {hashed_pw}
"""

    config_content += f"SocksPort {SOCKS_IP}:{port}\n"

    if bridges:
        transport = protocol_config.get('transport')
        config_content += "\nUseBridges 1\n"

        if transport == 'obfs4':
            obfs4_path = resolve_obfs4proxy_path()
            if obfs4_path:
                config_content += f"ClientTransportPlugin obfs4 exec {obfs4_path}\n"
            else:
                print("\033[1;33m‚ö†Ô∏è  obfs4proxy –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ obfs4proxy –∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OBFSPROXY_PATH.\033[0m")
            for bridge in bridges:
                config_content += f"Bridge {bridge}\n"

    with open(TORRC_PATH, 'w') as f:
        f.write(config_content)

    return TORRC_PATH

def resolve_obfs4proxy_path() -> Optional[str]:
    env_path = os.environ.get('OBFS4PROXY_PATH')
    if env_path and os.path.isfile(env_path):
        return env_path
    candidate = shutil.which('obfs4proxy')
    if candidate:
        return candidate
    termux_path = '/data/data/com.termux/files/usr/bin/obfs4proxy'
    if os.path.isfile(termux_path):
        return termux_path
    return None

def _build_requests_proxies(protocol_config) -> Dict[str, str]:
    port = protocol_config['port']
    return {
        'http': f'socks5h://{SOCKS_IP}:{port}',
        'https': f'socks5h://{SOCKS_IP}:{port}',
    }

def test_tor_connection(protocol_config, retries: int = 8, delay_seconds: int = 3) -> bool:
    global requests
    if requests is None:
        if not auto_install_requests():
            print("\033[1;31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 'requests'. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: pip install requests[socks]\033[0m")
            return False
        try:
            import requests as _requests
            requests = _requests
        except Exception:
            return False

    proxies = _build_requests_proxies(protocol_config)
    print("\033[1;33müîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∞–π—Ç (Tor check)...\033[0m")

    for attempt in range(1, retries + 1):
        try:
            response = requests.get(TOR_CHECK_URL, proxies=proxies, timeout=25)
            if response.status_code == 200:
                content_type = (response.headers.get('Content-Type') or '').lower()
                ip: Optional[str] = None
                is_tor: Optional[bool] = None

                if 'application/json' in content_type:
                    data = response.json()
                    ip = data.get('IP') or data.get('ip')
                    is_tor = data.get('IsTor')
                else:
                    ip = response.text.strip()

                if is_tor is True:
                    print(f"\033[1;32m‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ —á–µ—Ä–µ–∑ Tor. –í—ã—Ö–æ–¥–Ω–æ–π IP: {ip}\033[0m")
                else:
                    print(f"\033[1;33m‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. IP: {ip or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫ Tor.\033[0m")
                return True
            else:
                print(f"\033[1;33m‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}: —Å—Ç–∞—Ç—É—Å {response.status_code}\033[0m")
        except Exception as e:
            print(f"\033[1;33m‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}\033[0m")
        time.sleep(delay_seconds)

    print("\033[1;31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ —Å–∞–π—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\033[0m")
    return False

def auto_install_requests() -> bool:
    try:
        print("\033[1;33müõ†Ô∏è  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: requests[socks]...\033[0m")
        cmd = [sys.executable, '-m', 'pip', 'install', '--user', 'requests[socks]']
        result = subprocess.run(cmd, capture_output=True)
        if result.returncode != 0:
            cmd = [sys.executable, '-m', 'pip', 'install', 'requests[socks]']
            result = subprocess.run(cmd, capture_output=True)
        success = result.returncode == 0
        if success:
            print("\033[1;32m‚úì requests —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m")
        else:
            print("\033[1;31m‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ requests:\033[0m")
            try:
                stderr = result.stderr.decode(errors='ignore')
                if stderr:
                    print(stderr)
            except Exception:
                pass
        return success
    except Exception as e:
        print(f"\033[1;31m‚úó –°–±–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ requests: {e}\033[0m")
        return False

def print_install_instructions() -> None:
    os_name = platform.system()
    print("\033[1;36m" + "=" * 60 + "\033[0m")
    print("\033[1;33m–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Tor –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤\033[0m")
    print("\033[1;36m" + "-" * 60 + "\033[0m")

    print("\033[1;37mTor\033[0m:")
    if os_name == 'Windows':
        print("  1) –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tor (Expert Bundle):")
        print("     - winget: 'winget install TorProject.Tor' (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)")
        print("     - Chocolatey: 'choco install tor' (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Chocolatey)")
        print("     - –õ–∏–±–æ —Å–∫–∞—á–∞–π—Ç–µ —Å —Å–∞–π—Ç–∞ Tor Project: [Tor Expert Bundle](https://www.torproject.org/download/tor/)")
    elif os_name == 'Darwin':
        print("  1) macOS: 'brew install tor' (—á–µ—Ä–µ–∑ Homebrew)")
    else:
        print("  1) Linux: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä (apt/yum/pacman): 'sudo apt install tor'")
    print()

    print("\033[1;37mobfs4proxy\033[0m:")
    print("  - –ß–∞—Å—Ç–æ —Å—Ç–∞–≤–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∞–∫–µ—Ç–æ–º: 'sudo apt install obfs4proxy' (Linux)")
    print("  - –ù–∞ Windows —Å–∫–∞—á–∞–π—Ç–µ –±–∏–Ω–∞—Ä–Ω–∏–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–±–æ—Ä–∫–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, –∑–∞—Ç–µ–º —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π OBFSPROXY_PATH")
    print("  - Termux: 'pkg install obfs4proxy'")
    print()

    print("\033[1;37mPython-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\033[0m:")
    print("  - –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ 'requests[socks]' –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∫—Ä–∏–ø—Ç–æ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
    print("\033[1;36m" + "=" * 60 + "\033[0m")

def display_proxy_info(protocol_config):
    protocol_name = protocol_config['name']
    port = protocol_config['port']
    
    print("\033[1;32m‚úÖ Proxy —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\033[0m")
    print("\033[1;36m" + "=" * 60 + "\033[0m")
    print("\033[1;33müìã –î–ê–ù–ù–´–ï –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:\033[0m")
    print("\033[1;36m" + "-" * 60 + "\033[0m")
    
    print(f"\033[1;37müîß –ü—Ä–æ—Ç–æ–∫–æ–ª:\033[0m \033[1;32m{protocol_name}\033[0m")
    print(f"\033[1;37müåê IP –∞–¥—Ä–µ—Å:\033[0m \033[1;32m{SOCKS_IP}\033[0m")
    print(f"\033[1;37müö™ –ü–æ—Ä—Ç:\033[0m \033[1;32m{port}\033[0m")
    
    print(f"\033[1;37müë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\033[0m \033[1;32m{USERNAME}\033[0m")
    print(f"\033[1;37müîê –ü–∞—Ä–æ–ª—å:\033[0m \033[1;32m{PASSWORD}\033[0m")
    print(f"\033[1;37müì± –¢–∏–ø –ø—Ä–æ–∫—Å–∏:\033[0m \033[1;32mSOCKS5\033[0m")
    
    print("\033[1;36m" + "-" * 60 + "\033[0m")
    
    print("\033[1;33müì± –ù–ê–°–¢–†–û–ô–ö–ê –í –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø–•:\033[0m")
    print("\033[1;36m" + "-" * 60 + "\033[0m")
    
    print("\033[1;34müî∑ Telegram:\033[0m")
    print("   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–∞–Ω–Ω—ã–µ –∏ –ø–∞–º—è—Ç—å ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
    print(f"   –¢–∏–ø: SOCKS5 | –°–µ—Ä–≤–µ—Ä: {SOCKS_IP} | –ü–æ—Ä—Ç: {port}")
    print(f"   –õ–æ–≥–∏–Ω: {USERNAME} | –ü–∞—Ä–æ–ª—å: {PASSWORD}")
    print()
    
    print("\033[1;34müî∑ Discord:\033[0m")
    print("   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –ì–æ–ª–æ—Å –∏ –≤–∏–¥–µ–æ ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
    print(f"   –¢–∏–ø: SOCKS5 | –•–æ—Å—Ç: {SOCKS_IP} | –ü–æ—Ä—Ç: {port}")
    print(f"   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {USERNAME} | –ü–∞—Ä–æ–ª—å: {PASSWORD}")
    print()
    
    print("\033[1;34müî∑ –ë—Ä–∞—É–∑–µ—Ä—ã:\033[0m")
    print("   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–µ—Ç—å ‚Üí –ü—Ä–æ–∫—Å–∏ ‚Üí –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    print(f"   SOCKS Host: {SOCKS_IP} | Port: {port} | SOCKS v5")
    print()
    
    print("\033[1;34müî∑ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Android:\033[0m")
    print("   WiFi ‚Üí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Üí –ü—Ä–æ–∫—Å–∏ ‚Üí –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    print(f"   –•–æ—Å—Ç: {SOCKS_IP} | –ü–æ—Ä—Ç: {port}")
    
    if protocol_config['bridges']:
        print(f"\n\033[1;35müåâ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ—Å—Ç—ã:\033[0m \033[1;32m{len(protocol_config['bridges'])} obfs4 –º–æ—Å—Ç–æ–≤\033[0m")
        print("\033[1;33m   ‚ö° –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\033[0m")
    
    print("\033[1;36m" + "=" * 60 + "\033[0m")

def start_tor(protocol_config):
    return start_tor_proxy(protocol_config)

def start_tor_proxy(protocol_config):
    config_path = create_tor_config(protocol_config)

    print(f"\033[1;33müöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Tor —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º {protocol_config['name']}...\033[0m")
    
    process = subprocess.Popen(
        ['tor', '-f', config_path],
        stdout=subprocess.PIPE, 
        stderr=subprocess.PIPE
    )

    print("\033[1;33m‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...\033[0m")
    time.sleep(10)
    
    return process

def main():
    print_banner()

    try:
        subprocess.run(['tor', '--version'], check=True, capture_output=True)
    except:
        print("\033[1;31m‚ùå Tor –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pkg install tor\033[0m")
        return

    try:
        subprocess.run(['obfs4proxy', '-version'], check=True, capture_output=True)
    except:
        print("\033[1;33m‚ö†Ô∏è  obfs4proxy –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–æ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pkg install obfs4proxy\033[0m")
        time.sleep(3)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    protocol_choice = '2'
    selected_protocol = PROTOCOLS[protocol_choice]
    
    print(f"\033[1;32m‚úì –í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª: {selected_protocol['name']}\033[0m")
    time.sleep(1)

    tor_process = start_tor(selected_protocol)
    if not tor_process:
        print("\033[1;31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Tor\033[0m")
        return

    display_proxy_info(selected_protocol)

    test_tor_connection(selected_protocol)

    try:
        print("\n\033[1;33müí° –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ...")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\033[0m")
        
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        pass
    finally:
        print("\n\033[1;31müõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏...\033[0m")
        tor_process.terminate()
        tor_process.wait()
        print("\033[1;32m‚úÖ –ü—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\033[0m")

if __name__ == "__main__":
    main()